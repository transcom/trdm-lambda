#!/bin/bash

set -e -o pipefail -x

usage() {
    echo "Usage: $0 <ENVIRONMENT> <VERSION> <AWS_ACCESS_KEY_ID> <AWS_SECRET_ACCESS_KEY> <AWS_ACCOUNT_ID>"
    exit 1
}
[[ -z $1 || -z $2 || -z $3 || -z $4 || -z $5 ]] && usage

readonly ENVIRONMENT="$1"
readonly VERSION="$2"
readonly AWS_ACCESS_KEY_ID="$3"
readonly AWS_SECRET_ACCESS_KEY="$4"
readonly AWS_ACCOUNT_ID="$5"

export AWS_DEFAULT_REGION=us-gov-west-1

# Environment validation
case "${ENVIRONMENT}" in
stg | prd | exp) ;;
*)
    echo "ENVIRONMENT must be one of stg, prd, or exp"
    exit 1
    ;;
esac

# Define S3 bucket and key. We upload to S3 due to filesize restrictions
S3_BUCKET="transcom-gov-milmove-${ENVIRONMENT}-lambda-builds-${AWS_DEFAULT_REGION}"
S3_KEY="trdm-soap-proxy/${VERSION}/deployment-package.${ENVIRONMENT}.zip"

# Upload deployment package to S3
aws s3 cp "deployment-package.${ENVIRONMENT}.zip" "s3://${S3_BUCKET}/${S3_KEY}" --region $AWS_DEFAULT_REGION
echo "Uploaded ${ENVIRONMENT} deployment package to S3: s3://${S3_BUCKET}/${S3_KEY}"

# Update SSM parameter store with the new version
# This allows us to automate terraform while maintaining version management for each environment
aws ssm put-parameter --name "/trdm-lambda/version" --value "${VERSION}" --type String --overwrite --region $AWS_DEFAULT_REGION
echo "Updated ${ENVIRONMENT} SSM parameter store with version: ${VERSION}"

# TODO: Apply terraform
