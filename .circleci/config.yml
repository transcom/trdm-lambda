version: 2.1

references:
  circleci-docker: &circleci-docker milmove/circleci-docker:milmove-app-ab729849a08a773ea2557b19b67f378551d1ad3d
  tf132-docker: &tf132-docker milmove/circleci-docker:milmove-infra-tf132-ab729849a08a773ea2557b19b67f378551d1ad3d

executors:
  # Additional docker images are utilized without executors further below
  # It was done to circumvent known CircleCI local CLI issues to allow
  # local testing instead of testing live
  # See the following
  # - https://discuss.circleci.com/t/circleci-cli-error-response-from-daemon-invalid-uts-mode/48081/10
  # - https://github.com/CircleCI-Public/circleci-cli/issues/970
  # - https://circleci.com/docs/building-docker-images/#docker-version
  # 20.10.24 is listed as the deprecated CircleCI docker, but is also the last working version of docker
  # that didn't have this issue hence why we use remote docker containers
  mymove_compiler:
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  tls_small:
    resource_class: small
    working_directory: ~/transcom/mymove
    docker:
      - image: *circleci-docker
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  trdm_compiler:
    working_directory: ~/transcom/trdm-lambda
    docker:
      - image: milmove/docker-mvn
        auth:
          password: $DOCKER_PASSWORD
          username: $DOCKER_USERNAME
  terraform_executor:
    working_directory: ~/transcom/trdm-lambda
    docker:
      - image: *tf132-docker
        auth:
          password: $DOCKER_PASSWORD
          username: $DOCKER_USERNAME
jobs:
  test:
    executor: mymove_compiler
    environment:
      GOPATH: /home/circleci/go
      APPLICATION: app
      DB_PASSWORD: mysecretpassword
      DB_USER_LOW_PRIV: crud
      DB_PASSWORD_LOW_PRIV: mysecretpassword
      DB_USER: postgres
      DB_HOST: postgres_db_container
      DB_PORT_TEST: 5432 # Mymove's makefile will convert this to 5432 for CircleCI
      DB_PORT: 5432
      DB_NAME: test_db
      DB_NAME_TEST: test_db
      DTOD_USE_MOCK: "true"
      MIGRATION_MANIFEST: "migrations/app/migrations_manifest.txt"
      MIGRATION_PATH: "file://migrations/app/schema;file://migrations/app/secure"
      EIA_KEY: db2522a43820268a41a802a16ae9fd26 # dummy key generated with openssl rand -hex 16
      ENV: test
      ENVIRONMENT: test
      SERVER_REPORT: 1
      COVERAGE: 1
      SERVE_API_INTERNAL: "true"
      OKTA_CUSTOMER_CLIENT_ID: 1q2w3e4r5t6y7u8i9o
      OKTA_ADMIN_CLIENT_ID: AQ1SW2DE3FR4G5
      OKTA_OFFICE_CLIENT_ID: 9f9f9s8s90gig9
      OKTA_API_KEY: notrealapikey8675309
      OKTA_OFFICE_GROUP_ID: notrealgroupId
      OKTA_CUSTOMER_GROUP_ID: notrealcustomergroupId
    steps:
      - checkout
      # Attempt to bypass CircleCI CLI docker version issues by using the old version https://circleci.com/docs/building-docker-images/#docker-version
      # See ongoing issue here https://discuss.circleci.com/t/circleci-cli-error-response-from-daemon-invalid-uts-mode/48081/10
      - setup_remote_docker:
          version: 20.10.24
      - run:
          name: Ensure the PostgreSQL remote container is removed if something prevented shutdown previously
          command: sudo docker rm -f setup_tests_postgres_container || true
      - run:
          name: Start new docker network
          command: sudo docker network create nested_docker_network
      - run:
          name: Join the host container on the network
          command: sudo docker network connect nested_docker_network $(hostname)
      - run:
          name: Start PostgreSQL remote container
          command: sudo docker run --network nested_docker_network --network-alias postgres_db_container --rm -d --name setup_tests_postgres_container -e POSTGRES_PASSWORD=mysecretpassword -e POSTGRES_DB=test_db -v /dev/shm/pgdata:/var/lib/postgresql/data cimg/postgres:12.11 -c 'listen_addresses=*'
      - run:
          name: Get PostgreSQL container IP address
          command: |
            export DB_HOST=$(sudo docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' setup_tests_postgres_container)
            echo "DB_HOST=${DB_HOST}" | tee -a $BASH_ENV
      - run:
          name: Wait for PostgreSQL to be ready on remote test container
          command: |
            timeout 60 bash -c '
            until sudo docker exec setup_tests_postgres_container pg_isready -h ${DB_HOST} -p 5432 -U postgres; do
              echo "Waiting for PostgreSQL on ${DB_HOST}:5432..."
              sleep 2
            done' || echo "Timed out waiting for PostgreSQL on ${DB_HOST}:5432"
      - run:
          name: Create the test db without mymove binary
          command: |
            echo "Create the ${DB_NAME_TEST} database..."
            DB_NAME=postgres DB_PORT=${DB_PORT_TEST} ./scripts/wait-for-db && \
            createdb -p ${DB_PORT_TEST} -h ${DB_HOST} -U postgres ${DB_NAME_TEST} || true
      # Now that we have our test db, the next step is to get MyMove configured and migrate it
      - run:
          name: Checkout mymove repository
          command: git clone https://github.com/transcom/mymove.git ~/mymove
      - run:
          name: Create mymove binary
          command: |
            cd ~/mymove
            make bin/milmove
      - run:
          name: Migrate the PostgreSQL container's test db with MyMove migrations
          command: |
            cd ~/mymove
            make db_test_migrate_standalone
      # Now that the test_db is setup and migrated, the next step is to setup the maven testing container
      # to run tests against said test_dbÃŸ
      - run:
          name: Create and test the Maven container
          command: |
            # Tarball the current directory with the TRDM project files and send it to the maven_test_container
            # The maven_test_container receives it as input rather than a volume
            # This is important to allow local pipelines to run properly to avoid host machine volume mounting access issues
            # This will also create the maven_test_container with the milmove/docker-mvn image
            tar -czf - . | sudo docker run --network nested_docker_network --name maven_test_container --rm -i milmove/docker-mvn bash -c "
            # Execute the following commands inside of maven_test_container
            # Create a directory to store the tarball in the maven container
            mkdir -p /tmp/trdm
            # Extract the tarball from the input stream and place it into our directory
            tar -xzf - -C /tmp/trdm
            cd /tmp/trdm
            # Set the test db to read from the postgres container in our docker network
            export TEST_DB_URL='jdbc:postgresql://${DB_HOST}:${DB_PORT_TEST}/${DB_NAME_TEST}?user=${DB_USER}&password=${DB_PASSWORD}'
            export TEST_DB_HOST=${DB_HOST}
            export TEST_DB_PORT=${DB_PORT_TEST}
            export TEST_DB_NAME=${DB_NAME_TEST}
            export TEST_DB_USER=${DB_USER}
            mvn test"
      - run:
          name: Stop PostgreSQL remote container
          command: sudo docker stop setup_tests_postgres_container
          when: always
      - run:
          name: Disconnect host from docker network
          command: sudo docker network disconnect nested_docker_network $(hostname)
          when: always
      - run:
          name: Stop docker network
          command: sudo docker network rm nested_docker_network
          when: always

  # Utilize SAM CLI to build the lambda
  build:
    executor: trdm_compiler
    steps:
      - checkout
      - run:
          name: Build
          command: scripts/build
      - run:
          name: Move zips and checksums to workspace
          command: |
            mkdir -p workspace
            # Pull version from mvn and persist to workspace
            VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
            echo "VERSION=$VERSION" > ~/transcom/trdm-lambda/workspace/version.env
            # Persist scripts to workspace for future jobs
            cp -r scripts/ ~/transcom/trdm-lambda/workspace/scripts/
            cp deployment-package.stg.zip ~/transcom/trdm-lambda/workspace/
            # Duplicate stg zip for an exp deploy but with a different name
            cp deployment-package.stg.zip ~/transcom/trdm-lambda/workspace/deployment-package.exp.zip
            cp stg-checksums.txt ~/transcom/trdm-lambda/workspace/
            cp deployment-package.prd.zip ~/transcom/trdm-lambda/workspace/
            cp prd-checksums.txt ~/transcom/trdm-lambda/workspace/
      - persist_to_workspace:
          root: ~/transcom/trdm-lambda/workspace
          paths:
            - "deployment-package.exp.zip"
            - "deployment-package.stg.zip"
            - "stg-checksums.txt"
            - "deployment-package.prd.zip"
            - "prd-checksums.txt"
            - "scripts/"
            - "version.env"
  # `auth_check` checks if approved before continuing
  auth_check:
    executor: tls_small
    steps:
      - run: echo "build approved by $CIRCLE_USERNAME"
      - run:
          name: Check if approval has rights
          command: |
            if [[ $CIRCLE_USERNAME != "josiahzimmerman-caci" && $CIRCLE_USERNAME != "deandreJones" && $CIRCLE_USERNAME != "cameroncaci" ]]; then
               exit 1
            fi
  # Release to GitHub
  release:
    executor: trdm_compiler
    working_directory: ~/transcom/trdm-lambda/workspace
    steps:
      - attach_workspace:
          at: ~/transcom/trdm-lambda/workspace
      - run:
          name: Release
          command: |
            # Retrieve version from workspace
            source version.env
            echo "Releasing version v$VERSION to GitHub"
            scripts/release $CIRCLE_PROJECT_USERNAME $CIRCLE_PROJECT_REPONAME "v$VERSION"
  plan:
    executor: terraform_executor
    steps:
      - attach_workspace:
          at: ~/transcom/trdm-lambda/workspace
      - run:
          name: Fetch infrasec repo and set vars
          command: |
            # tmp pull the non-ato env
            git clone https://github.com/transcom/transcom-infrasec-gov-nonato.git
            # tmp set directory to exp
            TERRAFORM_DIRECTORY=transcom-infrasec-gov-nonato/transcom-gov-milmove-exp/app-experimental/
            # set to file for the apply job
            echo "TERRAFORM_DIRECTORY=$TERRAFORM_DIRECTORY" > ~/transcom/trdm-lambda/workspace/terraform_directory.env
      - run:
          name: Terraform plan
          command: |
            # Execute the terraform init and plan script
            ~/transcom/trdm-lambda/workspace/scripts/plan $TERRAFORM_DIRECTORY
      - persist_to_workspace:
          root: ~/transcom/trdm-lambda/workspace
          paths:
            - transcom-infrasec-gov-nonato/
  apply:
    executor: terraform_executor
    working_directory: ~/transcom/trdm-lambda/workspace
    steps:
      - attach_workspace:
          at: ~/transcom/trdm-lambda/workspace
      - run:
          name: Load necessary env vars
          command: source terraform_directory.env
      - run:
          name: Apply terraform plan
          command: |
            # Execute the terraform apply script
            ~/transcom/trdm-lambda/workspace/scripts/apply $TERRAFORM_DIRECTORY

  # Deploy to AWS
  upload_and_set_ssm_version_control_param:
    executor: trdm_compiler
    working_directory: ~/transcom/trdm-lambda/workspace
    parameters:
      environment:
        type: string
        default: "exp"
    steps:
      - attach_workspace:
          at: ~/transcom/trdm-lambda/workspace
      - run:
          name: Setup environment variables
          command: |
            # Retrieve version from workspace
            echo "Pulling version from workspace environment file"
            cat version.env
            source version.env
            echo "export VERSION=$VERSION" >> $BASH_ENV
            # Adjust deployment variables
            case << parameters.environment >> in
              "exp")
                echo "setting up environment variables for << parameters.environment >>"
                echo "export AWS_ACCOUNT_ID=$EXP_ACCOUNT_ID" >> $BASH_ENV
                echo "EXP_ACCOUNT_ID: ${EXP_ACCOUNT_ID}"
                echo "export AWS_ACCESS_KEY_ID=$EXP_ACCESS_KEY_ID" >> $BASH_ENV
                echo "export AWS_SECRET_ACCESS_KEY=$EXP_SECRET_ACCESS_KEY" >> $BASH_ENV
                ;;
              "stg")
                echo "setting up environment variables for << parameters.environment >>"
                echo "export AWS_ACCOUNT_ID=$STG_ACCOUNT_ID" >> $BASH_ENV
                echo "export AWS_ACCESS_KEY_ID=$STG_ACCESS_KEY_ID" >> $BASH_ENV
                echo "export AWS_SECRET_ACCESS_KEY=$STG_SECRET_ACCESS_KEY" >> $BASH_ENV
                ;;
              "prd")
                echo "setting up environment variables for << parameters.environment >>"
                echo "export AWS_ACCOUNT_ID=$PRD_ACCOUNT_ID" >> $BASH_ENV
                echo "export AWS_ACCESS_KEY_ID=$PRD_ACCESS_KEY_ID" >> $BASH_ENV
                echo "export AWS_SECRET_ACCESS_KEY=$PRD_SECRET_ACCESS_KEY" >> $BASH_ENV
                ;;
              *)
                echo "Unknown environment: << parameters.environment >>"
                exit 1
                ;;
            esac
            source $BASH_ENV
      - run:
          name: Upload and set SSM param
          command: |
            echo "Environment: << parameters.environment >>"
            echo "AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID}"
            scripts/upload-and-set-ssm-param "<< parameters.environment >>" "${VERSION}" "${AWS_ACCESS_KEY_ID}" "${AWS_SECRET_ACCESS_KEY}" "${AWS_ACCOUNT_ID}"
workflows:
  lambda:
    jobs:
      # - test
      - build
          # requires:
            # - test
      - approve:
          name: approve before github release
          type: approval
          context:
            - Workflow Approvers
          requires:
            - build
      - auth_check:
          name: auth check before github release
          requires:
            - approve before github release
          filters:
            branches:
              only: main
      - release:
          name: github release
          requires:
            - build
            - auth check before github release
            - approve before github release
          context:
            - org-global
          # filters:
          #   branches:
          #     only: main
          #   tags:
          #     only: /^v.*/
      - upload_and_set_ssm_version_control_param:
          name: upload and set ssm param for exp
          environment: exp
          requires:
            - github release
      - upload_and_set_ssm_version_control_param:
          environment: stg
          name: upload and set ssm param for stg
          requires:
            - github release
      - plan:
          name: terraform plan for stg
          requires:
            - upload and set ssm param for stg
      - approve:
          name: approve before terraform apply on stg
          type: approval
          context:
            - Workflow Approvers
          requires:
            - build
            - upload and set ssm param for stg
            - terraform plan for stg
      - auth_check:
          name: auth check before terraform apply on stg
          requires:
            - approve before terraform apply on stg
          filters:
            branches:
              only: main
      - apply:
          requires:
            - auth check before terraform apply on stg
            - approve before terraform apply on stg
          # filters:
          #   branches:
          #   - main # Only deploy when the commit is on the Main branch
